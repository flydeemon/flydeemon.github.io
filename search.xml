<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Node 记录</title>
    <url>/2017/08/31/Node-%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>当你定义的CSS中有position属性值为absolute、relative或fixed，
用z-index此取值方可生效。</p>
<h1 id="centos7-安装-node.js-8.9.4">CentOS7 安装 node.js 8.9.4</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-x64.tar.gz  </span><br><span class="line">tar zxvf node-v8.9.4-linux-x64.tar.gz</span><br><span class="line">mv node-v8.9.4-linux-x64 /usr/local/</span><br><span class="line">mv /usr/local/node-v8.9.4-linux-x64/ /usr/local/node</span><br><span class="line"></span><br><span class="line">vim /etc/profile</span><br><span class="line"># nodejs</span><br><span class="line">export NODE_HOME=/usr/local/node</span><br><span class="line">export PATH=$NODE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>React 学习记录</title>
    <url>/2017/04/20/React-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="一环境搭建">一、环境搭建</h1>
<p>1.使用 git 管理仓库</p>
<pre><code>git init</code></pre>
<p>2.使用 npm 管理项目</p>
<pre><code>npm init</code></pre>
<p>3.使用 react 库编写</p>
<pre><code>npm install --save-dev react react-dom</code></pre>
<p>4.使用 ES2015 语法</p>
<pre><code>npm install --save-dev babel-core babel-loader babelify babel-preset-es2015 babel-preset-react</code></pre>
<p>5.使用 webpack 构建模块</p>
<pre><code>npm install -g webpack webpack-dev-server
npm install --save-dev webpack webpack-dev-server</code></pre>
<p>6.启动项目</p>
<pre><code>webpack 编译文件，需要在浏览器打开本地 index.html
webpack-dev-server --content-base --inline --hot 实时编译，浏览器地址 http://localhsot:8080</code></pre>
<h1 id="二react-笔记">二、React 笔记</h1>
<p>1.组件中定义 this.xxx 时要在 super() 后定义</p>
<p>2.render 中的 this 指向当前类的实例</p>
<p>3.render 中的 this.props[xxx]
的值指向在组件类被调用的地方所赋的值</p>
<p>4.当在 render 中需要遍历时，Array.prototype.map() 需要为 html
元素设置唯一 key。可以使用 React.Children.map() 遍历组件中的子元素</p>
<p>5.组件类的类名首字母必须是大写，组件类只能包含一个顶层标签</p>
<p>6.JSX 语法中，标签中的 class 和 for 属性分别写成 className 和
htmlFor，否则会报错</p>
<p>7.在组件中的监听器需要都需要进行绑定 this.handle =
this.handle.bind(this) 否则监听器中的 this 将指向 null</p>
<p>8.需要获取真实的标签节点需要 this.refs.xxx 并在组件中定义该属性
<code>&lt;div ref="xxx"&gt;&lt;/div&gt;</code></p>
<p>9.在 ES6 中不需要重写 getInitialState() 直接在构造器中定义 this.state
= xxx</p>
<p>10.区分 this.props 和 this.state，this.props
是一旦定义就不会发生改变；this.state 是与用户交互的状态，随时会改变</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>git 记录</title>
    <url>/2018/03/07/git-%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="git-服务器安装">Git 服务器安装</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install git -y</span><br><span class="line">useradd git</span><br><span class="line">passwd git</span><br><span class="line"></span><br><span class="line">cd /var</span><br><span class="line">mkdir www</span><br><span class="line">chown -R git:git /var/www</span><br><span class="line">chmod 774 /var/www</span><br><span class="line">cd www</span><br><span class="line">git init --bare demo.git</span><br></pre></td></tr></table></figure>
<h3 id="禁用-git-用户-shell-登录">禁用 git 用户 shell 登录</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/passwd</span><br><span class="line"></span><br><span class="line">git:x:1000:1000::/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure>
<h3 id="公钥">公钥</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/git</span><br><span class="line">mkdir .ssh</span><br><span class="line">chown -R git:git .ssh</span><br><span class="line">touch .ssh/authorized_keys</span><br><span class="line"></span><br><span class="line">// 加入公钥</span><br><span class="line">vim .ssh/authorized_keys</span><br><span class="line"></span><br><span class="line">chmod 700 .ssh</span><br><span class="line">chmod 600 .ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<h3 id="自动同步到站点目录">自动同步到站点目录</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /var/www/demo.git/hooks</span><br><span class="line">vim post-receive</span><br><span class="line">chown git:git post-receive</span><br><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure>
<p>post-receive 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/var/www chckout -f</span><br></pre></td></tr></table></figure>
<h3 id="git-客户端">git 客户端</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@host:/var/www/demo.git</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Web 离线缓存</title>
    <url>/2017/04/20/Web-%E7%A6%BB%E7%BA%BF%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h1 id="一h5之前如何实现存储">一、H5之前如何实现存储</h1>
<h2 id="关于存储">1.关于存储</h2>
<ul>
<li>cache</li>
<li>磁盘文件</li>
<li>数据库</li>
<li>内存</li>
</ul>
<h2 id="h5之前">2.H5之前</h2>
<h3 id="cookies">cookies</h3>
<ul>
<li>http请求头上会带着</li>
<li>大小4K（每个域名）</li>
<li>主Domain污染</li>
</ul>
<h3 id="userdata">UserData</h3>
<ul>
<li>只有IE支持(5.0 -- 9.0)</li>
<li>XML文件</li>
<li>64K</li>
</ul>
<h3 id="目标">目标</h3>
<ul>
<li>解决4K大小问题</li>
<li>解决请求头常带存储信息的问题</li>
<li>解决关系型存储的问题</li>
<li>跨浏览器</li>
</ul>
<h1 id="二h5常见的存储方式">二、H5常见的存储方式</h1>
<h2 id="localstorage-sessionstorage">1.localstorage &amp;&amp;
sessionstorage</h2>
<ul>
<li>存储形式：key --&gt; value</li>
<li>过期：永久存储，永不失效，除非手动删除</li>
<li>大小：官方文档是每个域名5M</li>
</ul>
<h3 id="常用api">常用API</h3>
<ul>
<li>getItem(key)</li>
<li>setItem(key, value)</li>
<li>removeItem(key)</li>
<li>key(index)</li>
<li>clear()</li>
</ul>
<h3 id="区别">区别</h3>
<ul>
<li>localstorage 是全局的</li>
<li>sessionstorage 是会话级别，当关闭标签会消失</li>
<li>都可以存数组、json、图片、脚本、样式文件</li>
</ul>
<h3 id="注意事项">注意事项</h3>
<ul>
<li>使用前要判断浏览器是否支持（用window.localstorage和localstorage和.set()看是否报错)</li>
<li>写数据时，需要异常处理，避免超出容量抛错</li>
<li>避免把敏感的信息存入 localstorage</li>
<li>key 的唯一性</li>
<li>IOS 无痕浏览会停止存储</li>
</ul>
<h3 id="使用限制">使用限制</h3>
<ul>
<li>存储更新策略，过期控制</li>
<li>子域名之间不能共享存储数据（借助 postMessage 跨域）</li>
<li>超出存储大小之后如何存储（LRU，FIFO算法）</li>
<li>server 端如何取到 (get,post请求)</li>
</ul>
<h3 id="使用场景">使用场景</h3>
<ul>
<li>利用本地数据，减少网络传输</li>
<li>弱网络环境下，高延迟，低带宽，尽量把数据本地化</li>
</ul>
<h2 id="indexeddb-web-sql">2.IndexedDB &amp;&amp; Web SQL</h2>
<ul>
<li>一种能在浏览器中持久地存储结构化数据的数据库，并且为
Web应用提供了丰富的查询能力</li>
<li>Web SQL：W3C已经不再支持</li>
</ul>
<h3 id="存储结构">存储结构</h3>
<p>IndexedDB
是安于命分配独立空间，一个独立域名下可以创建多个数据库，每个数据库可以创建多个对象存储空间（表），一个对象存储空间可以存储多个对象数据</p>
<h3 id="功能">功能</h3>
<ul>
<li>增删改查</li>
<li>事务</li>
<li>游标</li>
<li>索引</li>
</ul>
<h2 id="application-cache">3.application cache</h2>
<h3 id="什么是离线缓存offline-application">什么是离线缓存（offline
application）</h3>
<p>它可以让 Web应用在离线的情况下继续使用，通过 manifest
文件知名需要缓存的资源</p>
<h3 id="检测是否在线">检测是否在线</h3>
<p>navigator.onLine</p>
<h3 id="如何引用">如何引用</h3>
<ul>
<li>在 HTML 页面中应用 manifest 文件
<code>&lt;html manifest="sample.appcache"&gt;</code></li>
<li>在 apche 服务器中 conf 目录下 mime.type 文件添加 text/cache-manifest
标识</li>
</ul>
<h3 id="如何更新">如何更新</h3>
<ul>
<li>如何有修改资源文件，必须通过修改 manifest
文件来刷新被缓存的文件列表</li>
</ul>
<h3 id="优势">优势</h3>
<ul>
<li>完全离线</li>
<li>资源被缓存，加载更快</li>
<li>减低 server 负载</li>
</ul>
<h3 id="缺陷">缺陷</h3>
<ul>
<li>含有 manifest 属性的当前请求页无论如何都会被缓存</li>
<li>更新需要建立在 manifest
文件的更新，文件更新后是需要在此刷新（需要2此刷新才能获取新资源）</li>
<li>更新是全局性的，无法单独更新某个文件（无法单点更新）</li>
<li>对于链接的参数变化是敏感的，任何一个参数的修改都会被（master）重新缓存（重复缓存含参页面）
index.html 和 index.html?renew=1 会被认为是不同的文件，分别缓存</li>
</ul>
<h3 id="使用场景-1">使用场景</h3>
<ul>
<li>单地址的页面</li>
<li>对实时性要求不高的业务</li>
<li>离线 webapp</li>
</ul>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/06/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very
first post. Check <a href="https://hexo.io/docs/">documentation</a> for
more info. If you get any problems when using Hexo, you can find the
answer in <a
href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or
you can ask me on <a
href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<p><span class="math display">\[E=mc^2\]</span></p>
<p><span class="math display">\[
\sum _{i=0}^{n-1}(i+1)=n(n+1)/2
\]</span></p>
<pre class="mermaid">
graph

A[Hard] --&gt;|Text| B(Round)
B --&gt; C{Decision}
C --&gt;|One| D[Result 1]
C --&gt;|Two| E[Result 2]

</pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>ams</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli eslint 问题</title>
    <url>/2017/08/16/vue-cli-eslint/</url>
    <content><![CDATA[<h1 id="关于-vue-cli-带给我们的困扰">关于 vue-cli 带给我们的困扰</h1>
<p>vue-cli 自带的 eslint 配置的代码风格和我们平时使用的风格不一样</p>
<p>主要是两个：</p>
<ul>
<li>缩进是两个空格</li>
<li>在函数的括号前面必须有一个空格</li>
</ul>
<p>这样就会带给我们一些编码上的困扰，接下来我们来看如何解决它！</p>
<h2 id="解决方法">解决方法</h2>
<p>1.修改该文件 <code>.eslintrc.js</code>,
加入代码修改缩进为4个空格和修改函数的括号前面不需带空格</p>
<figure>
<img src="pm1.png" alt="pic" />
<figcaption aria-hidden="true">pic</figcaption>
</figure>
<p>2.确保 <code>src</code> 下的文件缩进风格是 4 个 space (我的编辑器是
sublime)</p>
<figure>
<img src="pm2.png" alt="pic" />
<figcaption aria-hidden="true">pic</figcaption>
</figure>
<h2 id="如果我不想使用-eslint-怎么办">如果我不想使用 eslint
怎么办？</h2>
<p>直接注释图下的代码， <code>build/webpack.base.conf.js</code>
路径下</p>
<figure>
<img src="pm3.png" alt="pic" />
<figcaption aria-hidden="true">pic</figcaption>
</figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>vue-cli 测试报错</title>
    <url>/2017/08/25/vue-cli-test/</url>
    <content><![CDATA[<h1 id="关于-vue-cli-e2e-和-unit-测试报错的问题">关于 vue-cli e2e 和
unit 测试报错的问题</h1>
<p>1.<code>npm run e2e</code> 报错</p>
<ul>
<li><p>发现
<code>Error retrieving a new session from the selenium server</code>
的错误</p></li>
<li><p>解决办法: 更新 chromedriver, selenium-server</p></li>
</ul>
<p><code>npm install --save-dev chromedriver selenium-server</code></p>
<hr />
<p>2.<code>npm run unit</code> 报错</p>
<ul>
<li>发现类似这样的错误</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WARN [plugin]: Error during loading &quot;karma-phantomjs-launcher&quot; plugin:</span><br><span class="line">	Path must be a string. Received null</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">WARN [launcher]: Can not load &quot;PhantomJS&quot;, it is not registered!</span><br><span class="line">	Perhaps you are missing some plugin?</span><br></pre></td></tr></table></figure>
<ul>
<li>解决办法: 安装 phantomjs-prebuilt</li>
</ul>
<p><code>npm install --save-dev phantomjs-prebuilt</code></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>vue-热更新问题</title>
    <url>/2017/09/05/vue-%E7%83%AD%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>最近调试 vue 项目遇到一个热更新的问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HMR] Update check failed: Error: Manifest request to </span><br><span class="line">/0ca55ad0f6c9c867e01c.hot-update.json timed out. </span><br><span class="line">at XMLHttpRequest.request.onreadystatechange </span><br><span class="line">(http://localhost:8080/app.js:39:22)</span><br></pre></td></tr></table></figure>
<p>这个问题是 webpack 更新版本导致的 webpack-dev-middleware: ^1.12.0
此模板没有Webpack 3的官方支持 所以要返回 "webpack-dev-middleware":
"~1.11.0"</p>
<p>并且注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+// compiler.plugin(&#x27;compilation&#x27;, function (compilation) &#123;</span><br><span class="line"> +//   compilation.plugin(&#x27;html-webpack-plugin-after-emit&#x27;, function (data, cb) &#123;</span><br><span class="line"> +//     hotMiddleware.publish(&#123; action: &#x27;reload&#x27; &#125;)</span><br><span class="line"> +//     cb()</span><br><span class="line"> +//   &#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>React 开发中遇到的坑</title>
    <url>/2017/03/12/%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="警告需要安装-prop-types-package">警告：需要安装 prop-types
package</h1>
<p>这个是 React 的问题，最近官方更新 React 15.5.0 之后的版本都将弃用
React.PropTypes。 所以会提示让你安装 prop-types。详情去 React 官方的
release 查看。
如果你的项目中使用了第三方库，而那些库还没更新的情况下，最好的解决办法是：安装旧版本的
React 版本。 命令： npm install --save react@15.3.2 react-dom@15.3.2</p>
<p>如果你项目中并没有使用第三方库，那么就更新 React 版本并安装
prop-types 包。 命令： npm install --save react prop-types</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//项目中需要引入 prop-types</span><br><span class="line">import PropTypes from &#x27;prop-types&#x27;;</span><br><span class="line"></span><br><span class="line">const propTypes: &#123;</span><br><span class="line">    myArray: PropTypes.array,</span><br><span class="line">    myBool: PropTypes.bool,</span><br><span class="line">    myFunc: PropTypes.func,</span><br><span class="line">    myNumber: PropTypes.number,</span><br><span class="line">    myString: PropTypes.string,</span><br><span class="line">    requiredFunc: PropTypes.func.isRequired</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="webpack2-无法自动刷新或报错的问题">webpack2
无法自动刷新或报错的问题</h1>
<p>这个其实是路径的问题。嘛，我来慢慢解释下吧。 首先，webpack-dev-server
运行的时候，会将编译好的文件存储在内存中，所以你运行这条命令的时候在项目中是找不到这个编译好的文件的。那么问题来了，index.html
中 script
标签是要引入这个编译好的文件的，那该怎么办？（这里我们把编译好的文件定义成:
bundle.js）。 解决办法： * 第一个办法是 index.html 中 script
标签直接从项目的根目录引入 bundle.js 。</p>
<pre><code>` &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt; `

这里有个前提，你的 index.html 必须在项目根目录下。比如 react_example -&gt; index.html 。</code></pre>
<ul>
<li><p>第二个办法是在 webpack.config.js 文件中指定 bundle.js 放在哪里。
path：指定编译打包的路径，不是 html 中的 js 引用。
publicPath：在内存中的虚拟目录。html 中引用 js
文件时，必须引用此虚拟路径（但实际上引用的是内存中的文件）。
module.exports.output 中添加 publicPath 属性，该属性指定 bundle.js
文件放在 react_example/assets/ 中。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: __dirname + &#x27;/assets/&#x27;,</span><br><span class="line">    filename: &#x27;bundle.js&#x27;,</span><br><span class="line">    publicPath: &#x27;/assets/&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 然后修改index.html 中
script 标签</p>
<p><code>&lt;script src="assets/bundle.js"&gt;&lt;/script&gt;</code></p></li>
</ul>
<p>接下来，<code>webpack-dev-server --content-base src --hot --inline</code>
报错的问题。 --content-base 参数是指：定义从哪个路径开始监听。后面的 src
如果不写默认就是 / ，也就是当前项目根目录下，如果你加了 src 就是
当前项目根目录下的 src 目录里。报错的原因就是这个，你的 index.html
是放在 src 中吗？ 解决办法： 先检查你的 index.html 是否放在
项目根目录下，如果不是，建议放在 项目根目录下。然后编写命令：
<code>webpack-dev-server --content-base --inline --hot</code> src
就不需要写了。默认从项目根目录开始监听。</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title>谓语动词</title>
    <url>/2017/11/18/%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D/</url>
    <content><![CDATA[<h1 id="一谓语动词的的四大变态含义">一、谓语动词的的四大“变态”含义</h1>
<ul>
<li>【时态】动词随“时间”（现在、过去、将来、过去将来）、
“状态”（一般、进行、完成、完成进行）的改变而发生的变态</li>
<li>【被动】表现“被动”含义的动词变态</li>
<li>【虚拟】“白纸黑字说假话”时的动词变态</li>
<li>【情态】表现各种“感情色彩”（如推测、命令、请求）的动词变态（情态助动词）</li>
</ul>
<h1 id="二助动词的分类含义用法">二、助动词的分类、含义、用法</h1>
<h2 id="do-类助动词">do 类助动词：</h2>
<ul>
<li>【成员】do，does，did</li>
<li>【含义】表示“一般”“现在”“过去”等含义，此外 did，
还用来表示“虚拟”含义</li>
<li>【用法】do
类助词在陈述句中，往往和“实义动词”黏在一起，表示相应的时态含义</li>
</ul>
<h2 id="will-类助动词">will 类助动词：</h2>
<ul>
<li>【成员】will，would</li>
<li>【含义】表示各种“将来”</li>
<li>【用法】will 类助动词后面紧跟的词要写成“原型”形式</li>
</ul>
<h2 id="have-类助动词">have 类助动词：</h2>
<ul>
<li>【成员】have，has， had</li>
<li>【含义】表示各种“完成”</li>
<li>【用法】have 类助动词后面紧跟的词要写成“过去分词”形式</li>
</ul>
<h2 id="be-类助动词">be 类助动词：</h2>
<ul>
<li>【成员】am，is，are，was，were</li>
<li>【含义&amp;用法】 后面接“doing”，表示“进行”
后面接“done”，表示“被动”</li>
</ul>
<h3 id="例子">例子</h3>
<ul>
<li>请写出 employ 的“过去将来完成进行时的被动语态的否定形式”</li>
<li>(did + will + not) + have + be + be + employ</li>
<li>would not have been being employed</li>
</ul>
<h1 id="三时态-被动">三、时态 + 被动</h1>
<p>谓语动词题满分秘密：</p>
<ol type="1">
<li>题干：不设空的句子对空的作答具有决定的作用</li>
<li>选项：实义动词（这件事情）是一样的，关键看助动词在强调什么！</li>
</ol>
<h2 id="可以一句话解决的时态题">可以一句话解决的时态题</h2>
<ul>
<li>一般现在时：“经常...”/“真的...”/“老做某事”
（强调“永恒性”、“真实性”和“反复性”）</li>
<li>一般过去时：“当时...”
（强调该动作“当时的时间、地点、人物、方式”）</li>
<li>现在完成时：“已经...” （不强调动作本身，只强调结果或影响）</li>
<li>过去完成时：发生在一个一般过去时动作之前的动作，需要找“参照物”
（俗称过去的过去）</li>
</ul>
<h2 id="各种进行时">各种进行时：</h2>
<p>（复数名词后用动词原形）</p>
<ol type="1">
<li>强调个时间点上动作的“正在”，“未完成”</li>
<li>表达强烈情感“总是”</li>
</ol>
<ul>
<li>现在完成进行时：一个动作到现在“进行了一段时间”或“已经做了一段时间而且还在做”，
它的主要用法与现在完成时的“未完成”用法相仿</li>
<li>过去完成进行时：一个动作倒过去某一时间点为止“进行了一段时间”或“已经做了一段时间而且还在做”，
现在已经终止了</li>
<li>一般将来时：</li>
</ul>
<ol type="1">
<li>be going to do 强调主观计划准备做某事（打算做某事...）</li>
<li>will do 某事将会发生</li>
<li>be to do / be about to do 立刻、马上</li>
<li>祈使句 + and + you will （这样.../那么...）</li>
<li>祈使句 + or + you will （否则...）</li>
<li>“时间表”用一般现在时表将来</li>
<li>“位移动词”用现在进行时表将来 come; go; leave; arrive; begin; start;
die</li>
<li>“时间从句、条件从句”的“主将从现”/“主情从现”/“主祈从现”</li>
</ol>
<h2 id="将来完成进行时-与-将来完成时-的区别">将来完成进行时 与
将来完成时 的区别</h2>
<ul>
<li>将来完成进行时强调动作过程在另一动词之前的长度</li>
<li>将来完成时更强调在另一件事前一个动作的完成</li>
</ul>
<p>By the time John retires, James will have been practicing for 10
years.</p>
<p>到约翰退休的时候，詹姆斯已经在从事工作10年了。</p>
<p>与这个句子有所区别：</p>
<p>Before the time John retires, James would have retired.</p>
<h2 id="虚拟语气十大常见考点">【虚拟语气十大常见考点】</h2>
<ol type="1">
<li>But for + sth， + 主语 + 谓语虚拟 (要不是...)</li>
<li>Without + sth， + 主语 + 谓语虚拟 （要不是没有...）</li>
<li>If only + 主语 + 谓语虚拟 （要是...就好了！）</li>
<li>Would you mind + 主语 + 谓语虚拟 （您介不介意某人做某事？）</li>
<li>主句 + as if/as though + 主语 + 谓语虚拟
（就好像某人做了/要做某事）</li>
<li>主语A would rather + 主语B + 谓语虚拟 （宁愿、真希望...）</li>
<li>It's high time that sb did/should do sth.
（到了某人做某事的时间了）</li>
<li>It is necessary that sb (should) do sth.
（某人真的有必要做某事）</li>
<li>It is + strange/surprising that sb should（竟然） do sth.
（真奇怪，他竟然...）</li>
<li>主语A + 坚持/命令/建议/要求 + (that) + 主语B + (should) do sth.</li>
</ol>
<ul>
<li>坚持：insist</li>
<li>命令：order，command （recommend 建议）</li>
<li>建议：advise，propose，suggest</li>
<li>要求：demand，require，request，ask</li>
</ul>
<h3
id="虚拟语气最常见考点虚拟主从句">“虚拟语气”最常见考点：虚拟主从句</h3>
<ul>
<li>虚拟主句 + 虚拟从句</li>
<li>真实主句 + 真实从句 （都是条件从句）</li>
<li>真实主句 + did = 虚拟主句</li>
<li>真实从句 + did = 虚拟从句</li>
</ul>
<h3
id="真实从句中主将从现原则---虚拟从句中">真实从句中：（主将从现原则）
-&gt; 虚拟从句中：</h3>
<ul>
<li>过去：did -&gt; had done</li>
<li>现在：do -&gt; did/were</li>
<li>将来：will -&gt; should do/were to do</li>
</ul>
<h3
id="真实主句中主将从现原则---虚拟主句中">真实主句中：（主将从现原则）
-&gt; 虚拟主句中：</h3>
<ul>
<li>过去：would do -&gt; would/could/should/might + have done</li>
<li>现在/将来 will do -&gt; would/could/should/might + do</li>
</ul>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 记录</title>
    <url>/2017/08/31/MongoDB-%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="mongodb-记录">mongoDB 记录</h1>
<p>1.开启你的 mongodb 服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongod -dbpath &quot;D:\Program Files\MongoDB\data\db&quot; 数据库路径</span><br><span class="line">-logpath &quot;D:\Program Files\MongoDB\data\log\MongoDB.log&quot; log的路径 </span><br><span class="line">-logappend 追加文件</span><br><span class="line">-serviceName &quot;MongoDB&quot; 服务名</span><br><span class="line">-auth 是否需要用户验证</span><br><span class="line">-install 安装服务</span><br></pre></td></tr></table></figure>
<p>2.连接 mongodb</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell&gt; mongo  默认链接本地数据库</span><br><span class="line"></span><br><span class="line">shell&gt; mongo://user:pwd@host:port/db 连接远程数据库</span><br></pre></td></tr></table></figure>
<p>3.mongoose.model 默认会帮你的集合名加复数形式(s)，所以你必须正确让
mongoose 认识你指定的集合名</p>
<p><code>new Schama(&#123;&#125;, &#123;collection: '你的集合名'&#125;)</code></p>
<p>or</p>
<p><code>schema.set('collection', 'actor')</code></p>
<h1 id="centos7-下安装-mongodb-3.6.3">CentOS7 下安装 Mongodb 3.6.3</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1.下载解压</span><br><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.6.3.tgz</span><br><span class="line">tar-zxvf zxvf mongodb-linux-x86_64-3.6.3.tgz</span><br><span class="line"></span><br><span class="line">// 2.移动到 /usr/local/下</span><br><span class="line">rm -f mongodb-linux-x86_64-3.6.3.tgz</span><br><span class="line">mv mongodb-linux-x86_64-3.6.3 /usr/local/mongodb</span><br><span class="line">cd /usr/local/mongodb</span><br><span class="line"></span><br><span class="line">// 3.建立数据库存储路径和配置文件</span><br><span class="line">mkdir data</span><br><span class="line">mkdir data/db</span><br><span class="line">mkdir data/logs</span><br><span class="line">vim mongod.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>设置环境变量 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"># mongodb</span><br><span class="line">export MONGODB_HOME=/usr/local/mongodb</span><br><span class="line">export PATH=$MONGODB_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p>
<p>配置文件 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dbpath=/usr/local/mongodb/data/db</span><br><span class="line">logpath=/usr/local/mongodb/data/logs/mongodb.log #这个要指定文件</span><br><span class="line">fork=true</span><br><span class="line">logappend=true #日志追加</span><br><span class="line">port=27017</span><br><span class="line"># auth=true 先注释掉</span><br></pre></td></tr></table></figure></p>
<p>设置为服务必须在linux的/etc/init.d/下建立一个mongod的初始化启动文件
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/init.d/</span><br><span class="line">touch mongod</span><br><span class="line">chmod +x mongod</span><br><span class="line">vim mongod</span><br><span class="line"></span><br><span class="line">// 添加服务</span><br><span class="line">chkconfig --add mongod</span><br><span class="line">chkconfig mongod on</span><br><span class="line">service mongod start</span><br></pre></td></tr></table></figure></p>
<p>启动文件 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash  </span><br><span class="line">#chkconfig: 2345 80 90  </span><br><span class="line">#description: mongodb  </span><br><span class="line">start() &#123;  </span><br><span class="line">	/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/mongod.conf  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">stop() &#123;  </span><br><span class="line">    /usr/local/mongodb/bin/mongod -f /usr/local/mongodb/mongod.conf --shutdown  </span><br><span class="line">&#125;  </span><br><span class="line">case &quot;$1&quot; in  </span><br><span class="line">  start)  </span><br><span class="line"> start  </span><br><span class="line"> ;;  </span><br><span class="line">  </span><br><span class="line">stop)  </span><br><span class="line"> stop  </span><br><span class="line"> ;;  </span><br><span class="line">  </span><br><span class="line">restart)  </span><br><span class="line"> stop  </span><br><span class="line"> start  </span><br><span class="line"> ;;  </span><br><span class="line">  *)  </span><br><span class="line"> echo  </span><br><span class="line">$&quot;Usage: $0 &#123;start|stop|restart&#125;&quot;  </span><br><span class="line"> exit 1  </span><br><span class="line">esac</span><br></pre></td></tr></table></figure></p>
<h1 id="mongodb-登录授权">Mongodb 登录授权</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.createUser(&#123;user:&quot;master&quot;,pwd:&quot;master&quot;,roles:[&#123;&quot;role&quot;:&quot;userAdminAnyDatabase&quot;,&quot;db&quot;:&quot;admin&quot;&#125;]&#125;)</span><br><span class="line"></span><br><span class="line">// 退出 mongo 停止 mongod 服务</span><br><span class="line">// 修改 mongod.conf 使用 bind_ip=0.0.0.0 auth=true</span><br><span class="line">// 重启 mongod 服务</span><br><span class="line"></span><br><span class="line">use admin</span><br><span class="line">db.auth(&#x27;master&#x27;,&#x27;master&#x27;) </span><br><span class="line">use test</span><br><span class="line">db.createUser(&#123;user:&quot;demo&quot;,pwd:&quot;demo&quot;,roles:[&#123;&quot;role&quot;:&quot;readWrite&quot;,&quot;db&quot;:&quot;test&quot;&#125;]&#125;)</span><br><span class="line">db.auth(&#x27;demo&#x27;, &#x27;demo&#x27;)</span><br></pre></td></tr></table></figure>
<p>最后是远程连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo host:port/db -u user -p pwd</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
  </entry>
</search>
